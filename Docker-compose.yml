version: '3.8'

services:
  # === Базы данных PostgreSQL ===
  postgres-auth:
    image: postgres:13
    container_name: postgres-auth
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./databases/postgres-auth-data:/var/lib/postgresql/data
      - ./database/init-auth.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

  postgres-user-profile:
    image: postgres:13
    container_name: postgres-user-profile
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./databases/postgres-user-profile-data:/var/lib/postgresql/data
      - ./database/init-user-profile.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

  # === База данных MongoDB ===
  mongo-queue:
    image: mongo:5
    container_name: mongo-queue
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - ./database/mongo-queue-data:/data/db
    networks:
      - backend

  # === Redis кэширование данных ===
  redis-auth:
    image: redis:6
    container_name: redis-auth
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./database/redis-auth-data:/data
    networks:
      - backend

  redis-queue:
    image: redis:6
    container_name: redis-queue
    restart: always
    ports:
      - "6380:6379"
    volumes:
      - ./database/redis-queue-data:/data
    networks:
      - backend

  redis-websocket:
    image: redis:6
    container_name: redis-websocket
    restart: always
    ports:
      - "6381:6379"
    volumes:
      - ./database/redis-websocket-data:/data
    networks:
      - backend

  # === Kafka ===

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - backend

  # === Микросервисы ===
  api-gateway:
    build: ./services/API Gateway
    container_name: api-gateway
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: prod
    ports:
      - "8000:8080"
    depends_on:
      - auth-service
      - user-service
      - queue-service
      - notification-service
      - websocket-service
    networks:
      - backend

  auth-service:
    build: ./services/Auth Service
    container_name: auth-service
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: prod
      REDIS_HOST: redis-auth
      REDIS_PORT: 6379
      POSTGRES_HOST: postgres-auth
      POSTGRES_PORT: 5432
      POSTGRES_DB: auth_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8081:8080"
    depends_on:
      - postgres-auth
      - redis-auth
      - kafka
    networks:
      - backend

  user-service:
    build: ./services/User Service
    container_name: user-service
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: prod
      CLOUD_STORAGE_ACCESS_KEY: ${CLOUD_STORAGE_ACCESS_KEY}
      CLOUD_STORAGE_SECRET_KEY: ${CLOUD_STORAGE_SECRET_KEY}
      CLOUD_STORAGE_BUCKET: ${CLOUD_STORAGE_BUCKET}
      REDIS_HOST: redis-user
      REDIS_PORT: 6379
      POSTGRES_HOST: postgres-user
      POSTGRES_PORT: 5432
      POSTGRES_DB: user_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8082:8080"
    depends_on:
      - postgres-user
      - redis-user
      - kafka
    networks:
      - backend

  queue-service:
    build: ./services/Queue Service
    container_name: queue-service
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: prod
      REDIS_HOST: redis-queue
      REDIS_PORT: 6379
      MONGO_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo-queue:27017/queue_db
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8083:8080"
    depends_on:
      - mongo-queue
      - redis-queue
      - kafka
    networks:
      - backend

  notification-service:
    build: ./services/Notification Service
    container_name: notification-service
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: prod
      REDIS_HOST: redis-queue
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8084:8080"
    depends_on:
      - redis-queue
      - kafka
    networks:
      - backend

  websocket-service:
    build: ./services/Websocket Service
    container_name: websocket-service
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: prod
      REDIS_HOST: redis-websocket
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8085:8080"
    depends_on:
      - redis-websocket
      - kafka
    networks:
      - backend
networks:
  backend: